// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sinisaos/chi-ent/ent/question"
	"github.com/sinisaos/chi-ent/ent/questiontag"
	"github.com/sinisaos/chi-ent/ent/tag"
)

// QuestionTagCreate is the builder for creating a QuestionTag entity.
type QuestionTagCreate struct {
	config
	mutation *QuestionTagMutation
	hooks    []Hook
}

// SetQuestionID sets the "question_id" field.
func (qtc *QuestionTagCreate) SetQuestionID(i int) *QuestionTagCreate {
	qtc.mutation.SetQuestionID(i)
	return qtc
}

// SetTagID sets the "tag_id" field.
func (qtc *QuestionTagCreate) SetTagID(i int) *QuestionTagCreate {
	qtc.mutation.SetTagID(i)
	return qtc
}

// SetQuestion sets the "question" edge to the Question entity.
func (qtc *QuestionTagCreate) SetQuestion(q *Question) *QuestionTagCreate {
	return qtc.SetQuestionID(q.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (qtc *QuestionTagCreate) SetTag(t *Tag) *QuestionTagCreate {
	return qtc.SetTagID(t.ID)
}

// Mutation returns the QuestionTagMutation object of the builder.
func (qtc *QuestionTagCreate) Mutation() *QuestionTagMutation {
	return qtc.mutation
}

// Save creates the QuestionTag in the database.
func (qtc *QuestionTagCreate) Save(ctx context.Context) (*QuestionTag, error) {
	return withHooks(ctx, qtc.sqlSave, qtc.mutation, qtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qtc *QuestionTagCreate) SaveX(ctx context.Context) *QuestionTag {
	v, err := qtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qtc *QuestionTagCreate) Exec(ctx context.Context) error {
	_, err := qtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtc *QuestionTagCreate) ExecX(ctx context.Context) {
	if err := qtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtc *QuestionTagCreate) check() error {
	if _, ok := qtc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "QuestionTag.question_id"`)}
	}
	if _, ok := qtc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "QuestionTag.tag_id"`)}
	}
	if _, ok := qtc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "QuestionTag.question"`)}
	}
	if _, ok := qtc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "QuestionTag.tag"`)}
	}
	return nil
}

func (qtc *QuestionTagCreate) sqlSave(ctx context.Context) (*QuestionTag, error) {
	if err := qtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qtc.mutation.id = &_node.ID
	qtc.mutation.done = true
	return _node, nil
}

func (qtc *QuestionTagCreate) createSpec() (*QuestionTag, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionTag{config: qtc.config}
		_spec = sqlgraph.NewCreateSpec(questiontag.Table, sqlgraph.NewFieldSpec(questiontag.FieldID, field.TypeInt))
	)
	if nodes := qtc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   questiontag.QuestionTable,
			Columns: []string{questiontag.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qtc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   questiontag.TagTable,
			Columns: []string{questiontag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionTagCreateBulk is the builder for creating many QuestionTag entities in bulk.
type QuestionTagCreateBulk struct {
	config
	err      error
	builders []*QuestionTagCreate
}

// Save creates the QuestionTag entities in the database.
func (qtcb *QuestionTagCreateBulk) Save(ctx context.Context) ([]*QuestionTag, error) {
	if qtcb.err != nil {
		return nil, qtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qtcb.builders))
	nodes := make([]*QuestionTag, len(qtcb.builders))
	mutators := make([]Mutator, len(qtcb.builders))
	for i := range qtcb.builders {
		func(i int, root context.Context) {
			builder := qtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qtcb *QuestionTagCreateBulk) SaveX(ctx context.Context) []*QuestionTag {
	v, err := qtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qtcb *QuestionTagCreateBulk) Exec(ctx context.Context) error {
	_, err := qtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtcb *QuestionTagCreateBulk) ExecX(ctx context.Context) {
	if err := qtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
