// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sinisaos/chi-ent/ent/question"
	"github.com/sinisaos/chi-ent/ent/questiontag"
	"github.com/sinisaos/chi-ent/ent/tag"
)

// QuestionTag is the model entity for the QuestionTag schema.
type QuestionTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID int `json:"question_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID int `json:"tag_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionTagQuery when eager-loading is set.
	Edges        QuestionTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionTagEdges holds the relations/edges for other nodes in the graph.
type QuestionTagEdges struct {
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionTagEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionTagEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[1] {
		if e.Tag == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questiontag.FieldID, questiontag.FieldQuestionID, questiontag.FieldTagID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionTag fields.
func (qt *QuestionTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questiontag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qt.ID = int(value.Int64)
		case questiontag.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				qt.QuestionID = int(value.Int64)
			}
		case questiontag.FieldTagID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				qt.TagID = int(value.Int64)
			}
		default:
			qt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QuestionTag.
// This includes values selected through modifiers, order, etc.
func (qt *QuestionTag) Value(name string) (ent.Value, error) {
	return qt.selectValues.Get(name)
}

// QueryQuestion queries the "question" edge of the QuestionTag entity.
func (qt *QuestionTag) QueryQuestion() *QuestionQuery {
	return NewQuestionTagClient(qt.config).QueryQuestion(qt)
}

// QueryTag queries the "tag" edge of the QuestionTag entity.
func (qt *QuestionTag) QueryTag() *TagQuery {
	return NewQuestionTagClient(qt.config).QueryTag(qt)
}

// Update returns a builder for updating this QuestionTag.
// Note that you need to call QuestionTag.Unwrap() before calling this method if this QuestionTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (qt *QuestionTag) Update() *QuestionTagUpdateOne {
	return NewQuestionTagClient(qt.config).UpdateOne(qt)
}

// Unwrap unwraps the QuestionTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qt *QuestionTag) Unwrap() *QuestionTag {
	_tx, ok := qt.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionTag is not a transactional entity")
	}
	qt.config.driver = _tx.drv
	return qt
}

// String implements the fmt.Stringer.
func (qt *QuestionTag) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qt.ID))
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", qt.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", qt.TagID))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionTags is a parsable slice of QuestionTag.
type QuestionTags []*QuestionTag
