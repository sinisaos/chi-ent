// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sinisaos/chi-ent/ent/answer"
	"github.com/sinisaos/chi-ent/ent/predicate"
	"github.com/sinisaos/chi-ent/ent/question"
	"github.com/sinisaos/chi-ent/ent/tag"
	"github.com/sinisaos/chi-ent/ent/user"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetTitle sets the "title" field.
func (qu *QuestionUpdate) SetTitle(s string) *QuestionUpdate {
	qu.mutation.SetTitle(s)
	return qu
}

// SetSlug sets the "slug" field.
func (qu *QuestionUpdate) SetSlug(s string) *QuestionUpdate {
	qu.mutation.SetSlug(s)
	return qu
}

// SetContent sets the "content" field.
func (qu *QuestionUpdate) SetContent(s string) *QuestionUpdate {
	qu.mutation.SetContent(s)
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetViews sets the "views" field.
func (qu *QuestionUpdate) SetViews(i int) *QuestionUpdate {
	qu.mutation.ResetViews()
	qu.mutation.SetViews(i)
	return qu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableViews(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetViews(*i)
	}
	return qu
}

// AddViews adds i to the "views" field.
func (qu *QuestionUpdate) AddViews(i int) *QuestionUpdate {
	qu.mutation.AddViews(i)
	return qu
}

// SetLikes sets the "likes" field.
func (qu *QuestionUpdate) SetLikes(i int) *QuestionUpdate {
	qu.mutation.ResetLikes()
	qu.mutation.SetLikes(i)
	return qu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableLikes(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetLikes(*i)
	}
	return qu
}

// AddLikes adds i to the "likes" field.
func (qu *QuestionUpdate) AddLikes(i int) *QuestionUpdate {
	qu.mutation.AddLikes(i)
	return qu
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qu *QuestionUpdate) AddAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddAnswerIDs(ids...)
	return qu
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qu *QuestionUpdate) AddAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.AddAnswerIDs(ids...)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (qu *QuestionUpdate) SetAuthorID(id int) *QuestionUpdate {
	qu.mutation.SetAuthorID(id)
	return qu
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableAuthorID(id *int) *QuestionUpdate {
	if id != nil {
		qu = qu.SetAuthorID(*id)
	}
	return qu
}

// SetAuthor sets the "author" edge to the User entity.
func (qu *QuestionUpdate) SetAuthor(u *User) *QuestionUpdate {
	return qu.SetAuthorID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (qu *QuestionUpdate) AddTagIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddTagIDs(ids...)
	return qu
}

// AddTags adds the "tags" edges to the Tag entity.
func (qu *QuestionUpdate) AddTags(t ...*Tag) *QuestionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qu.AddTagIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (qu *QuestionUpdate) ClearAnswers() *QuestionUpdate {
	qu.mutation.ClearAnswers()
	return qu
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (qu *QuestionUpdate) RemoveAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveAnswerIDs(ids...)
	return qu
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (qu *QuestionUpdate) RemoveAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.RemoveAnswerIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (qu *QuestionUpdate) ClearAuthor() *QuestionUpdate {
	qu.mutation.ClearAuthor()
	return qu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (qu *QuestionUpdate) ClearTags() *QuestionUpdate {
	qu.mutation.ClearTags()
	return qu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (qu *QuestionUpdate) RemoveTagIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveTagIDs(ids...)
	return qu
}

// RemoveTags removes "tags" edges to Tag entities.
func (qu *QuestionUpdate) RemoveTags(t ...*Tag) *QuestionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Question.title": %w`, err)}
		}
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := qu.mutation.Slug(); ok {
		_spec.SetField(question.FieldSlug, field.TypeString, value)
	}
	if value, ok := qu.mutation.Content(); ok {
		_spec.SetField(question.FieldContent, field.TypeString, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.Views(); ok {
		_spec.SetField(question.FieldViews, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedViews(); ok {
		_spec.AddField(question.FieldViews, field.TypeInt, value)
	}
	if value, ok := qu.mutation.Likes(); ok {
		_spec.SetField(question.FieldLikes, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedLikes(); ok {
		_spec.AddField(question.FieldLikes, field.TypeInt, value)
	}
	if qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.AuthorTable,
			Columns: []string{question.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.AuthorTable,
			Columns: []string{question.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !qu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetTitle sets the "title" field.
func (quo *QuestionUpdateOne) SetTitle(s string) *QuestionUpdateOne {
	quo.mutation.SetTitle(s)
	return quo
}

// SetSlug sets the "slug" field.
func (quo *QuestionUpdateOne) SetSlug(s string) *QuestionUpdateOne {
	quo.mutation.SetSlug(s)
	return quo
}

// SetContent sets the "content" field.
func (quo *QuestionUpdateOne) SetContent(s string) *QuestionUpdateOne {
	quo.mutation.SetContent(s)
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetViews sets the "views" field.
func (quo *QuestionUpdateOne) SetViews(i int) *QuestionUpdateOne {
	quo.mutation.ResetViews()
	quo.mutation.SetViews(i)
	return quo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableViews(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetViews(*i)
	}
	return quo
}

// AddViews adds i to the "views" field.
func (quo *QuestionUpdateOne) AddViews(i int) *QuestionUpdateOne {
	quo.mutation.AddViews(i)
	return quo
}

// SetLikes sets the "likes" field.
func (quo *QuestionUpdateOne) SetLikes(i int) *QuestionUpdateOne {
	quo.mutation.ResetLikes()
	quo.mutation.SetLikes(i)
	return quo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableLikes(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetLikes(*i)
	}
	return quo
}

// AddLikes adds i to the "likes" field.
func (quo *QuestionUpdateOne) AddLikes(i int) *QuestionUpdateOne {
	quo.mutation.AddLikes(i)
	return quo
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (quo *QuestionUpdateOne) AddAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddAnswerIDs(ids...)
	return quo
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) AddAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.AddAnswerIDs(ids...)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (quo *QuestionUpdateOne) SetAuthorID(id int) *QuestionUpdateOne {
	quo.mutation.SetAuthorID(id)
	return quo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableAuthorID(id *int) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetAuthorID(*id)
	}
	return quo
}

// SetAuthor sets the "author" edge to the User entity.
func (quo *QuestionUpdateOne) SetAuthor(u *User) *QuestionUpdateOne {
	return quo.SetAuthorID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (quo *QuestionUpdateOne) AddTagIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddTagIDs(ids...)
	return quo
}

// AddTags adds the "tags" edges to the Tag entity.
func (quo *QuestionUpdateOne) AddTags(t ...*Tag) *QuestionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return quo.AddTagIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) ClearAnswers() *QuestionUpdateOne {
	quo.mutation.ClearAnswers()
	return quo
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveAnswerIDs(ids...)
	return quo
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (quo *QuestionUpdateOne) RemoveAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.RemoveAnswerIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (quo *QuestionUpdateOne) ClearAuthor() *QuestionUpdateOne {
	quo.mutation.ClearAuthor()
	return quo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (quo *QuestionUpdateOne) ClearTags() *QuestionUpdateOne {
	quo.mutation.ClearTags()
	return quo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (quo *QuestionUpdateOne) RemoveTagIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveTagIDs(ids...)
	return quo
}

// RemoveTags removes "tags" edges to Tag entities.
func (quo *QuestionUpdateOne) RemoveTags(t ...*Tag) *QuestionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return quo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.Title(); ok {
		if err := question.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Question.title": %w`, err)}
		}
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := quo.mutation.Slug(); ok {
		_spec.SetField(question.FieldSlug, field.TypeString, value)
	}
	if value, ok := quo.mutation.Content(); ok {
		_spec.SetField(question.FieldContent, field.TypeString, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.Views(); ok {
		_spec.SetField(question.FieldViews, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedViews(); ok {
		_spec.AddField(question.FieldViews, field.TypeInt, value)
	}
	if value, ok := quo.mutation.Likes(); ok {
		_spec.SetField(question.FieldLikes, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedLikes(); ok {
		_spec.AddField(question.FieldLikes, field.TypeInt, value)
	}
	if quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.AuthorTable,
			Columns: []string{question.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.AuthorTable,
			Columns: []string{question.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !quo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
